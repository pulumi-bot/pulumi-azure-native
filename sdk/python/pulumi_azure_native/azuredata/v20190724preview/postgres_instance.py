# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities, _tables
from . import outputs

__all__ = ['PostgresInstanceArgs', 'PostgresInstance']

@pulumi.input_type
class PostgresInstanceArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 postgres_instance_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PostgresInstance resource.
        :param pulumi.Input[str] resource_group_name: The name of the Azure resource group
        :param pulumi.Input[str] postgres_instance_name: Name of PostgresInstance
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if postgres_instance_name is not None:
            pulumi.set(__self__, "postgres_instance_name", postgres_instance_name)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        """
        The name of the Azure resource group
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="postgresInstanceName")
    def postgres_instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of PostgresInstance
        """
        return pulumi.get(self, "postgres_instance_name")

    @postgres_instance_name.setter
    def postgres_instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postgres_instance_name", value)


class PostgresInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PostgresInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Postgres Instance.

        :param str resource_name: The name of the resource.
        :param PostgresInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 postgres_instance_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        A Postgres Instance.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] postgres_instance_name: Name of PostgresInstance
        :param pulumi.Input[str] resource_group_name: The name of the Azure resource group
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PostgresInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
        	__self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
        	__self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 postgres_instance_name: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['postgres_instance_name'] = postgres_instance_name
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['hybrid_data_manager_id'] = None
            __props__['location'] = None
            __props__['name'] = None
            __props__['system_data'] = None
            __props__['tags'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:azuredata/v20190724preview:PostgresInstance"), pulumi.Alias(type_="azure-native:azuredata:PostgresInstance"), pulumi.Alias(type_="azure-nextgen:azuredata:PostgresInstance"), pulumi.Alias(type_="azure-native:azuredata/v20200908preview:PostgresInstance"), pulumi.Alias(type_="azure-nextgen:azuredata/v20200908preview:PostgresInstance")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(PostgresInstance, __self__).__init__(
            'azure-native:azuredata/v20190724preview:PostgresInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PostgresInstance':
        """
        Get an existing PostgresInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["hybrid_data_manager_id"] = None
        __props__["location"] = None
        __props__["name"] = None
        __props__["system_data"] = None
        __props__["tags"] = None
        __props__["type"] = None
        return PostgresInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="hybridDataManagerId")
    def hybrid_data_manager_id(self) -> pulumi.Output[Optional[str]]:
        """
        null
        """
        return pulumi.get(self, "hybrid_data_manager_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The geo-location where the resource lives
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemData")
    def system_data(self) -> pulumi.Output['outputs.SystemDataResponse']:
        """
        Read only system data
        """
        return pulumi.get(self, "system_data")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Resource tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

